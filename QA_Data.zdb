(what( is |'s ))?java( language)?\??#Java is a programming language, application development and deployment environment.
((describe|define) )?(method.?|function.?) overloading\??#Define several methods with same name within a class, but with different method signature.
(how.)?access data members? of (a.)?class in java( language)?\??#Dot Operator(.) is used to access the data members of a class.
(((simple )?java (code|program))|(java sample (code|program))|((java )?hello world (code|program)))\??#public class Java_Code_Simple {~   public static void main(String []args) {~      instructions~   }~}
((what )? ?(an )?object contains?)\??#An object contain - States and Behaviors.
((what are (the )?)?features? of ((object oriented programming)|(oop)))\??#1. Encapsulation.~2. Abstraction.~3. Inheritance.~4. Polymorphism
((what are the )?(major )?((features?)|(principles?))? of java( )?(technology )?(architecture)?)\??|(java( major)? features?)\??#1. Java Run Time Environment.~2. Java Virtual Machine.~3. Just in Time Compiler.~4. Java Tools.~5. Garbage Collector.
((what are the )?objectives? of java( technology)?)\??|(java objectives?)\??#1. Simple.~2. Object oriented.~3. Secure.~4. Smaller code.~5. Multithreaded.~6. High performance.
(java( program)?( development)?( and)? execution steps?)\??#1. Save code with .java extension.~2. Compile code using javac file_name.~3. Execute using java file_name.
((what are the )?types? of inheritance( in java)?)\??#1. Single inheritance.~2. Multiple inheritance.
((what(( is)|('s))?(( a)|( an))? )?class(es)?( in java)?)\??#Classes are used to define objects of a certain type.
((what(( is)|('s))?(( a)|( an))? )?abstraction( in java)?)\??#Abstraction is a process of hiding the implementation details.
((what(( is)|('s))?(( a)|( an))? )?object( in java)?)\??#An object is an instance of a classes.
((what(( is)|('s))?(( a)|( an))? )?encapsulation( in java)?)\??#Is the Mechanism that binds together code and the data it manipulates, and keeps both safe from outside interference and misuse.
((what(( is)|('s))?(( a)|( an))? )?garbage collector)\??#Garbage Collector use to deallocate unused memory.
((what(( is)|('s))?(( a)|( an))? )?inheritance( in java)?)\??#Inheritance is the design technique in object oriented programming to implement is-a relationship between objects.
((what(( is)|('s))?(( a)|( an))? )?((java development kit\(jdk\))|(jdk)|(java development kit)))\??#JDK contain JRE, Compilers and debuggers required to develop applets and applications.
((what(( is)|('s))?(( a)|( an))? )?((java virtual machine\(jvm\))|(jvm)|(java virtual machine)))\??#JVM (Java Virtual Machine) is runtime environment in which java bytecode can be executed.
((what(( is)|('s))?(( a)|( an))? )?((just in time( compiler)?\(jit\))|(jit)|(just in time( compiler)?)))\??#Just in time Compiler (JIT) compiles JAVA byte code to native machine code and execute.
((what(( is)|('s))?(( a)|( an))? )?((object oriented programming\(oop\))|(oop)|(object oriented programming)))\??#Programming paradigm based on the concept of "objects", which contain attributes and methods.
((what(( is)|('s))?(( a)|( an))? )?polymorphism( in java)?)\??#Polymorphism is defined as the ability of an object to take multiple forms depending on their type or class.
((what(( is)|('s))?(( a)|( an))? )?((java runtime environment\(jre\))|(jre)|(java runtime environment)))\??#Java Runtime Environment is an implementation of the Java Virtual Machine which executes Java programs.
((what(( is)|('s))?(( a)|( an))? )?debugger( in java)?)\??#A debugger is a software program used to test and find bugs (errors) in other program, java use jdb debugger.
((what(( is)|('s))?(( a)|( an))? )?applet( in java)?)\??#An applet is a Java program that runs in a Web browser, an applet extends java.applet.Applet class.
((what(( is)|('s))?(( a)|( an))? )?interface( in java)?)\??#An interface is a collection of abstract methods. A class implements an interface,~It includes:~An interface does not contain any constructors.~All of the methods in an interface are abstract.
((what(( is)|('s))?(( a)|( an))? )?multithreading( in java)?)\??#Multithreading in java is a process of executing multiple threads simultaneously.
((java )?threads? states?)\??#The java thread states are as follows:~1. New.~2. Runnable.~3. Running.~4. Non-Runnable (Blocked).~5. Terminated.
(((((describe )|(define ))?life cycle of thread)|(thread life cycle))( in java)?)\??#The life cycle of a thread include:~1. Newborn state.~2. Runnable state.~3. Running state.~4. Blocked state.~5. Dead state.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?wrappers?( class(es)?)?( in java)?)\??#These are classes that allow primitive types to be accessed as objects.~Example: Integer, Character, Double, Boolean etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?constructor( in java)?)\??#Constructor in java is a special type of method that is used to initialize the object. Java constructor is invoked at the time of object creation.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?array( in java)?)\??#Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. There are two types of array ~1. 1D-Array.~2. 2D-Array.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?arraylist( in java)?)\??#Java ArrayList uses a dynamic array for storing the elements, manipulation is slow because a lot of shifting needs to be occurred if any element is added or removed from the array list.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?linkedlist( in java)?)\??#Java LinkedList uses doubly linked list to store the elements, manipulation is fast because no shifting needs to be occurred.
(((why )|(where ))?use linkedlist( in java)?)\??#Java LinkedList use doubly linklist to store data, use linkedlist where data adding and removing frequently.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?compiler( in java)?)\??#Compiler generate machine code of source code.
((what((( is)|('s)))?(( a)|( an))? )?(\")?this(\")?(( reference)|( keyword))?( in java)?)\??#use "this" keyword to avoid ambiguity. this() with or without parameters to call another constructor of current class.
((what((( is)|('s)))?(( a)|( an))? )?(\")?void(\")?(( reference)|( keyword))?( in java)?)\??#void use in method or function in the place "return type" which mean method return nothing
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?selection( statements?)?( in java)?)\??#if and switch statements.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?iteration( statements?)?( in java)?)\??#for loop, while loop and do-while loop.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?switch( statement)?( in java)?)\??#switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?if(( condition)|( statement))?( in java)?)\??#if statement tests the condition. It executes the if block if condition is true.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?if(( )|(-))else(( condition)|( statement))?( in java)?)\??#if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((nested( |-)if)|(if( |-)else( |-)?if))( statement)( in java)?)\??#if-else-if ladder statement executes one condition from multiple statements.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((((conditional)|(ternary))( operator)?)|(\?\:))( in java)?)\??#Operator behave like if-else statement.~result = testCondition ? true_value1 : false_value2
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?while(( loop)|( statement))?( in java)?)\??#while loop repeats a set of code while the condition is true.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?for(( loop)|( statement))?( in java)?)\??#for loop repeats a set of code while the condition is true.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?do(( )|(-))while(( condition)|( statement))?( in java)?)\??#do-while loop repeats a set of code atleast once before the condition is tested.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?nested( |-)loop( statement)( in java)?)\??#A nested loop is a loop within a loop, an inner loop within the body of an outer one.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\++)|(increment))( operator)?( in java)?)\??#increment operator ++ add one in operand, two types of increment.~ - post increment~ - pre increment.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?post( |-)increment( in java)?)\??#Post-increment creates a copy of the object, increments the value of the object and returns the copy from before the increment.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?pre( |-)increment( in java)?)\??#Pre-increment operators increments the value of the object and returns a reference to the result.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\--)|(decrement))( operator)?( in java)?)\??#decrement operator -- subtract one from operand, two types of decrement.~ - post decrement~ - pre decrement.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?post( |-)decrement( in java)?)\??#Post-decrement creates a copy of the object, decrements the value of the object and returns the copy from before the decrement.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?pre( |-)decrement( in java)?)\??#Pre-decrement operators decrements the value of the object and returns a reference to the result.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?primitive(( data)? type)?( in java)?)\??#Primitive types are the most basic data types available within the Java language. There are 8: boolean, byte, char, short, int, long, float and double.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?reference(( data)? type)?( in java)?)\??#Reference or non primitive data types are created by using basic data types, String, Scanner, Random, etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?getter(( methods?)|( functions?))( in java)?)\??#Public getter methods or functions provide the view of variables values.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?setter(( methods?)|( functions?))( in java)?)\??#Public setter methods or functions modify the variables values.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((methods?)|(functions?))( in java)?)\??#Method or Function is a collection of statements that are grouped together to perform an operation.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((methods?)|(functions?)) definition( in java)?)\??#Method or function in java is ~public <returnType> <methodName>() {~    <bodyOfMethod>~}
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?postfix( expressions?)?( in java)?)\??#In postfix expression return object than perform operation on object.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?prefix( expressions?)?( in java)?)\??#In prefix expression perform operation on object then return object.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?parameters?( in java)?)\??#A parameter is the variable which is part of the method’s signature (method declaration)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?arguments?( in java)?)\??#An argument is an expression used when calling the method.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?assign(s)?(ment)?( statement)?( in java)?)\??#Assignment operator use to assigning a value to a variable using this pattern:~   variableName = value ;
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(variable )?initialization( in java)?)\??#Create an object and assign some value to an object at same time.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(variable )?declaration( in java)?)\??#Create an object and assign nothing.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\=)|(assignment))( operator)?( in java)?)\??#Assignment operator = use to assigns values from right side operands to left side operand.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?logical ((operators?)|(operations?))?( in java)?)\??#Perform logical operation on data, some logical operators are OR( | ), AND( & ), XOR( ^ ) AND NOT( ~ ).
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\&\&)|(conditional and))( operator)?( in java)?)\??#The logical AND operator ( && ) returns the boolean value true if both operands are true and returns false otherwise.~  (condition_1)&&(condition_2)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\|\|)|(conditional or))( operator)?( in java)?)\??#The logical OR operator ( || ) returns the boolean value true if either or both operands is true and returns false otherwise.~  (condition_1)||(condition_2)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\!)|(not))( operator)?( in java)?)\??#The logical negation operator ( ! ) reverses the meaning of its operand.~  !(operand)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\&)|((((logical)|(bitwise)|(binary)) )?and))( operator)?( in java)?)\??#Return bit by bit AND result of two operands.~  1001 & 1110 = 1000
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\|)|((((logical)|(bitwise)|(binary)) )?or))( operator)?( in java)?)\??#Return bit by bit OR result of two operands.~  1001 | 1110 = 1110
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\^)|((((logical)|(bitwise)|(binary)) )?xor))( operator)?( in java)?)\??#Return bit by bit XOR result of two operands.~  1001 ^ 1110 = 0111
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((>>>)|(zero fill right shift))( operator)?( in java)?)\??#Shift operand value right n time and left side of operand with zeros.~   A=2~   A>>>1 //shift A value right one time and put zero at left side.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((>>)|(right shift))( operator)?( in java)?)\??#Shift operand value right n time.~   A=2~   A>>1 //shift A value right one time.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((<<)|(left shift))( operator)?( in java)?)\??#Shift operand value left n time.~   A=2~   A<<1 //shift A value left one time.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?arithmetic ((operators?)|(operations?))( in java)?)\??#Perform arithmetic operation on data, some standard arithmetic operators are addition ( + ), subtraction ( - ), multiplication ( * ), and division ( / ).
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\=\=)|(equal( to)?))( operator)?( in java)?)\??#Checks if the values of two operands are equal or not, if equal then condition becomes true.~  (variable_1 == variable_2)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\!\=)|(not equal( to)?))( operator)?( in java)?)\??#Checks if the values of two operands are equal or not, if not equal then condition becomes true.~  (variable_1 != variable_2)
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?packages?( in java)?)\??#A Package can be defined as a grouping of related types (classes, interfaces, enumerations and annotations ) providing access protection and namespace management.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?composition( in java)?)\??#Composition is the design technique in object oriented programming to implement has-a relationship between objects.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?comments?( in java)?)\??#The Java language supports three types of comments.~  /* text */~   // text~   /** doc */
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((source code)|(src))( in java)?)\??#All the instructions a programmer uses to build the program are known as source code.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?machine ((code)|(language))( in java)?)\??#Machine code, also known as machine language, is the elemental language of computers, long sequence of binary digital zeros and ones (bits). Ultimately, the output of any programming language.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?instance( in java)?)\??#An instance is a unique copy of a Class that representing an Object. When a new instance of a class is created, the JVM will allocate memory for that class instance.
((what((( is)|('s)))?(( a)|( an))? )?(\")?final(\")?( keyword)?( in java)?)\??#The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:~   1. variable (Keep variable value constant)~    2. method (Protect method from overiding)~    3. class (To make class non extendable)
((what((( is)|('s)))?(( a)|( an))? )?(\")?static(\")?( keyword)?( in java)?)\??#The static keyword in Java means that the variable or function is shared between all instances of that class as it belongs to the type.
((what((( is)|('s)))?(( a)|( an))? )?(\")?abstract(\")?( keyword)?( in java)?)\??#A class that is declared with abstract keyword, is known as abstract class in java. It can have abstract and non-abstract methods (method with body).
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?final class(es)?( in java)?)\??#final class is not extendable class, final class cannot be subclassed.~   final class class_Name{~}
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?static ((methods?)|(functions?))( in java)?)\??#static methods in Java can be called without creating an object of class. For example~  Math.sqrt(num); // sqrt is static method
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?static class(es)?( in java)?)\??#Outer classes cannot be static, but nested/inner classes can be. That basically helps you to use the nested/inner class without creating an instance of the outer class.~class OuterClass{~      public static class NestedStaticClass{~      }~}
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?subclass(es)?( in java)?)\??#The derived class (the class that is derived from another class) is called a subclass.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?superclass(es)?( in java)?)\??#The class from which class derived is called the superclass.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((\.)|(dot))( operators?)?( in java)?)\??#1. It enables you to access instance variables of any objects within a class.~2. It enables you to store values in instance variables of an object.~3. It is used to call object methods.~4. It is to create a new object.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(java )?access modifiers?( in java)?)\??#The access modifiers in java specifies accessibility (scope) of a data member, method, constructor or class. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?default((( access)? modifiers?)|( members?))( in java)?)\??#Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.~A variable or method declared without any access control modifier is available to any other class in the same package.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?public((( access)? modifiers?)|( members?))( in java)?)\??#A class, method, constructor, interface, etc. declared public can be accessed from any other class. Therefore, fields, methods, blocks declared inside a public class can be accessed from any class belonging to the java.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?private((( access)? modifiers?)|( members?))( in java)?)\??#Methods, variables, and constructors that are declared private can only be accessed within the declared class itself.~Private access modifier is the most restrictive access level. Class and interfaces cannot be private.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?protected((( access)? modifiers?)|( members?))( in java)?)\??#Variables, methods, and constructors, which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.~The protected access modifier cannot be applied to class and interfaces. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?exceptions?( in java)?)\??#An exception (or exceptional event) is a problem that arises during the execution of a program.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(handle )?exceptions?( handling)( in java)?)\??#The exception handling in java is one of the powerful mechanism to handle the runtime errors so that normal flow of the application can be maintained.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?enum( in java)?)\??#Enum is a data type that contains fixed set of constants.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?string( in java)?)\??#String is basically an object that represents sequence of char values. An array of characters works same as java string.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?tostring( method)?( in java)?)\??#The java toString() method is used when we need a string representation of an object.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?string( )?builder( in java)?)\??#Java StringBuilder class is used to create mutable (modifiable) string.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?string( )?builder to( )?string( in java)?)\??#The StringBuilder.toString() method returns a string representing the data in this sequence.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(string )?tokenizer( in java)?)\??#The StringTokenizer class allows you to break a string into tokens. It is simple way to break string.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((regular expression)|(regexp))( in java)?)\??#A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(system.out.)?println(\(\))?( in java)?)\??#System.out.println is a Java statement that prints the argument passed, into the System.out and also print newline.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(system.out.)?print(\(\))?( in java)?)\??#System.out.println is a Java statement that prints the argument passed, into the System.out.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?scanner( in java)?)\??#Scanner is a class in java.util package used for obtaining the input of the primitive types like int, double etc. and strings.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?file streaming( in java)?)\??#A stream can be defined as a sequence of data. The InputStream is used to read data from a source file and the OutputStream is used for writing data to a destination file.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?file( )?input( )?stream( in java)?)\??#Java FileInputStream class obtains input bytes from a file.It is used for reading streams of raw bytes such as image data.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?file( )?output( )?stream( in java)?)\??#Java FileOutputStream is an output stream for writing data to a file.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?file( )?reader( in java)?)\??#Java FileReader class is used to read data from the file. It returns data in byte format like FileInputStream class.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?file( )?writer( in java)?)\??#Java FileWriter class is used to write character-oriented data to the file.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((object serialization)|(object( )?input( )?stream)|(object( )?output( )?stream))( in java)?)\??#Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes that includes the object's data as well as information about the object's type and the types of data stored in the object. Classes ObjectInputStream and ObjectOutputStream are high-level streams that contain the methods for serializing and deserializing an object.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((recursion)|(recursive ((methods?)|(functions?))))( in java)?)\??#Recursion is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?searching algorithms?)\??#A search algorithm is an algorithm that retrieves information stored within some data structure.~There are some types of searching algorithm:~1. Linear Search.~2. Binary Search.~3. Interpolation Search.~4. Hash Table.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?linear( )?search( in java)?)\??#A sequential search is made over all items one by one. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?binary( )?search( in java)?)\??#Binary search is a fast search algorithm with run-time complexity of Ο(log n). This search algorithm works on the principle of divide and conquer, the data collection should be in the sorted form.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?hash table( in java)?)\??#Hash Table is a data structure which stores data in an associative manner. In a hash table, data is stored in an array format, where each data value has its own unique index value. Access of data becomes very fast if we know the index of the desired data.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?hashing( in java)?)\??#Hashing is a technique to convert a range of key values into a range of indexes of an array. Item are in the (key,value) format.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?sorting( in java)?)\??#Sorting refers to arranging data in a particular format. Most common orders are in numerical or lexicographical order.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?bubble( )?sort(ing)?)\??#This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?insertion( )?sort(ing)?)\??#This is an in-place comparison-based sorting algorithm. Here, a sub-list is maintained which is always sorted. For example, the lower part of an array is maintained to be sorted. An element which is to be 'insert'ed in this sorted sub-list.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?selection( )?sort(ing)?)\??#This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?merge( )?sort(ing)?)\??#Merge sort is a sorting technique based on divide and conquer technique. With worst-case time complexity being Ο(n log n), merge sort first divides the array into equal halves and then combines them in a sorted manner.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?quick( )?sort(ing)?)\??#Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. Its average and worst case complexity are of Ο(nlogn).
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?generic programming( in java)?)\??#Generic methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types, respectively.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?collections?( in java)?)\??#Collections in java is a framework that provides an architecture to store and manipulate the group of objects. All the operations that you perform on a data such as searching, sorting, insertion, manipulation, deletion etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?sets?( in java)?)\??#The Set Interface. A Set is a Collection that cannot contain duplicate elements. It models the mathematical set abstraction.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?lists?( in java)?)\??#The List interface extends Collection and declares the behavior of a collection that stores a sequence of elements.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?maps?( in java)?)\??#A map contains values on the basis of key i.e. key and value pair. Each key and value pair is known as an entry. Map contains only unique keys.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?queues?( in java)?)\??#FIFO structure, the Queue interface is a subtype of the Collection interface. It represents an ordered list of objects just like a List, but objects inserted at the end of the queue, and objects removed from the beginning of the queue. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?priority( )?queues?( in java)?)\??#A priory queue is a queue in which each element has an associated priority. The element with the highest priority is removed next from the queue.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?properties?( in java)?)\??#Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a String and the value is also a String.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?stacks?( in java)?)\??#A stack is a collection that is based on the last-in-first-out (LIFO) strategy, provide push and pop method to insert and remove data from stack respectively.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?pop(\(\))?( from stacks?)?( in java)?)\??#The pop() method is used to remove the object at the top of this stack and returns that object as the value of this function.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?push(\(\))?( in(to)? stacks?)?( in java)?)\??#The push(Object item) method is used to Pushes an item onto the top of this stack.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?threads?( in java)?)\??#A thread is a lightweight sub process, a smallest unit of processing. It is a separate path of execution.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?runnable(\(\))?( method)?( in java)?)\??#The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called run().
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?run(\(\))?( method)?( in java)?)\??#The run() is used to perform action for a thread. The run() method is called if this thread was constructed using a separate Runnable run object, else this method does nothing and returns.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?((run)|(start)) thread( in java)?)\??#Starts the execution of the thread.JVM calls the run() method on the thread. run() is used to perform action for a thread.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?socket programming( in java)?)\??#Socket Programming. Sockets provide the communication mechanism between two computers using TCP.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?sockets?( in java)?)\??#A socket is one endpoint of a two-way communication link between two programs running on the network.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?ports?( in java)?)\??#Port numbers are from 0 to 65535. An endpoint of network is a combination of an IP address and a port number.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jdbc( in java)?)\??#Java JDBC is a java API to connect and execute query with the database. JDBC API uses jdbc drivers to connect with the database.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jdbc drivers?( in java)?)\??#JDBC Driver is a software component that enables java application to interact with the database.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?get( )?connection(\(\))?( in ((java)|(jdbc)))?)\??#The getConnection() method of DriverManager class is used to establish connection with the database. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?create( )?statement(\(\))?( in ((java)|(jdbc)))?)\??#The createStatement() method of Connection interface is used to create statement. The object of statement is responsible to execute queries with the database. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?prepared( )?statements?(\(\))?( in ((java)|(jdbc)))?)\??#PreparedStatement() interfaces define the methods and properties that enable you to send SQL commands and receive data from your database. The PreparedStatement interface accepts input parameters at runtime.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?execute( )?query(\(\))?( in ((java)|(jdbc)))?)\??#The executeQuery() method of Statement interface is used to execute queries to the database. This method returns the object of ResultSet that can be used to get all the records of a table. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?result( )?sets?(\(\))?( in ((java)|(jdbc)))?)\??#A ResultSet consists of records. Each records contains a set of columns.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?close(\(\))?( connections?)?(\(\))?( in ((java)|(jdbc)))?)\??#JDBC required explicitly to close all the connections to the database to end each database session, using close() method.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?sql( in java)?)\??#SQL (Structured Query Language) is used to perform operations on the records stored in database such as updating records, deleting records, creating and modifying tables, views etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(sql )?injection( in sql)?)\??#SQL injection is a technique where malicious users can inject SQL commands into an SQL statement, via web page input.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(sql )?(injection )?((105 )?or (')?1(')?\=(')?1(')?)( injection)?( in sql)?)\??#SQL injection, it will return all rows from the table Users, since WHERE 1=1 is always true.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?querys( in ((java)|(sql)))?)\??#A query is an inquiry into the database using the SELECT statement. A query is used to extract data from the database in a readable format according to the user's request.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?servlets?( in java)?)\??#Servlets provide a component-based, platform-independent method for building Web-based applications, without the performance limitations of CGI programs.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?cgi( programs?)?( in ((java)|(servlets?)))?)\??#A CGI program is any program designed to accept and return data that conforms to the CGI specification. CGI programs are the most common way for Web servers to interact dynamically with users.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(http )?requests?( in ((java)|(servlets?)))?)\??#Servlet is to handle client request. Servlet API provides two important interfaces ServletRequest and HttpServletRequest to encapsulate client request. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(http )?responses?( in ((java)|(servlets?)))?)\??#A servlet can send the response either as character or binary data against request.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?get( )?sessions?(\(\))?( in ((java)|(servlets?)))?)\??#container creates a session id for each user.The container uses this id to identify the particular user.An object of HttpSession can be used to perform two tasks:~    bind objects~    view and manipulate information about a session, such as the session identifier, creation time, and last accessed time. getSession() returns the current session associated with this request, or if the request does not have a session, creates one.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?doget(\(\))?( in ((java)|(servlets?)))?)\??#doGet() handle GET request, a method GET shouldn't change the internal state of your application.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?dopost(\(\))?( in ((java)|(servlets?)))?)\??#doPost() handle POST request, POST is used to modify the internal state of your application.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?send( )?redirect(\(\))?( in ((java)|(servlets?)))?)\??#The sendRedirect() method of HttpServletResponse interface can be used to redirect response to another resource, it may be servlet, jsp or html file.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?http( )?servlets?( in ((java)|(servlets?)))?)\??#The HttpServlet class extends the GenericServlet class and implements Serializable interface. It provides http specific methods such as doGet, doPost, doHead, doTrace etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?print( )?writer( in ((java)|(servlets?)))?)\??#PrintWriter stream can be used to send character data as servlet response.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?servlet( )?output( )?stream( in ((java)|(servlets?)))?)\??#ServletOutputStream stream to send binary data as servlet response. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?cookies?( in ((java)|(servlets?)))?)\??#Cookies are text files stored on the client computer and they are kept for various information tracking purpose.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?crud?( in ((java)|(servlets?)))?)\??#A CRUD (Create, Read, Update and Delete) application is the most important application for any project development.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(servlets? )?filters?( in ((java)|(servlets?)))?)\??#A filter is an object that is invoked at the preprocessing and postprocessing of a request.It is mainly used to perform filtering tasks such as conversion, logging, compression, encryption and decryption, input validation etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jsp( in java)?)\??#JSP technology is used to create web application just like Servlet technology. It can be thought of as an extension to servlet because it provides more functionality than servlet such as expression language, jstl etc.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jsp ( life)?( cycle)?( in java)?)\??#The JSP pages follows these phases:    ~~1. Translation of JSP Page.    ~2. Compilation of JSP Page.    ~3. Classloading (class file is loaded by the classloader)    ~4. Instantiation (Object of the Generated Servlet is created).    ~5. Initialization ( jspInit() method is invoked by the container).    ~6. Reqeust processing ( _jspService() method is invoked by the container).    ~7. Destroy ( jspDestroy() method is invoked by the container).
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jsp directives?( in ((java)|(jsp)))?)\??# The jsp directives are messages that tells the web container how to translate a JSP page into the corresponding servlet.~There are three types of directives:    ~~1. page directive.    ~2. include directive.    ~3. taglib directive.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?pages?( directives?)?( in ((java)|(jsp)))?)\??# The page directive defines attributes that apply to an entire JSP page.~Syntax of JSP page directive    ~<%@ page attribute="value" %>  
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?includes?( directives?)?( in ((java)|(jsp)))?)\??#The include directive is used to include the contents of any resource it may be jsp file, html file or text file.~Syntax of include directive    ~~<%@ include file="resourceName" %>  
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?tablibs?( directives?)?( in ((java)|(jsp)))?)\??#The JSP taglib directive is used to define a tag library that defines many tags.~Syntax JSP Taglib directive   ~~<%@ taglib uri="uriofthetaglibrary" prefix="prefixoftaglibrary" %>  
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?jsp scriptlets? tags?( in ((java)|(jsp)))?)\??#In JSP, java code can be written inside the jsp page using the scriptlet tag.There are three types of scripting elements:    ~~1. scriptlet tag.    ~2. expression tag.    ~3. declaration tag.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?scriptlets?( tags?)?( in ((java)|(jsp)))?)\??#A scriptlet tag is used to execute java source code in JSP.~Syntax is as follows:    ~~<%  java source code %>
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?declarations?( tags?)?( in ((java)|(jsp)))?)\??#The JSP declaration tag is used to declare fields and methods.~The code written inside the jsp declaration tag is placed outside the service() method of auto generated servlet.~Syntax of the declaration tag is as follows:   ~~<%!  field or method declaration %>  
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(jsp )?expression?( tags?)?( in ((java)|(jsp)))?)\??#The code placed within JSP expression tag is written to the output stream of the response.~Syntax of JSP expression tag is as follows:    ~~<%=  statement %>
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?hibernate( frameworks?)?( in ((java)|(servlets?)))?)\??#Hibernate framework simplifies the development of java application to interact with the database. Hibernate is an open source, lightweight, ORM (Object Relational Mapping) tool.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?spring( frameworks?)?( in ((java)|(servlets?)))?)\??#Spring framework is an open source Java platform, can be used in developing any Java application, but there are extensions for building web applications on top of the Java EE platform. Spring framework targets to make J2EE development easier to use and promote good programming practice by enabling a POJO-based programming model.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?struts( frameworks?)?( in ((java)|(servlets?)))?)\??#Struts is an open source framework that extends the Java Servlet API and employs a Model, View, Controller (MVC) architecture. It enables you to create maintainable, extensible, and flexible web applications based on standard technologies, such as JSP pages, JavaBeans, resource bundles, and XML.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?observer( in java)?)\??#Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?observable( in java)?)\??#This class represents an observable object, an observable object can have one or more observers. An observer may be any object that implements interface Observer. After an observable instance changes, an application calling the Observable's notifyObservers method causes all of its observers to be notified of the change by a call to their update method. 
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?singleton( design)?( pattern)?( in java)?)\??#Singleton design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.This pattern involves a single class which is responsible to create an object while making sure that only single object gets created.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?(java )?((ide)|(integrated development environment)))\??#A Java IDE (Integrated Development Environment) is a software application which enables users to more easily write and debug Java programs. Many IDEs provide features like syntax highlighting and code completion, which help the user to code more easily.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?eclipse( ide)?)\??#Eclipse is an integrated development environment (IDE) used in computer programming, and is the most widely used Java IDE. It contains a base workspace and an extensible plug-in system for customizing the environment.
((what((( is)|('s))|(( are)|('re)))?(( a)|( an))? )?(use )?netbeans?( ide)?)\??#NetBeans IDE offers first-class tools for Java web, enterprise, desktop, and mobile application development. It is consistently the first IDE to support the latest versions of the JDK, Java EE, and JavaFX.
