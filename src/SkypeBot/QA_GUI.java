/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SkypeBot;

import com.skype.SkypeException;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.UIManager;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author zain
 */
public final class QA_GUI extends javax.swing.JFrame
{
    // fullPath is "./src/SkypeBot/" when project run from netbeans IDE, fullPath is QA_DB.filesPath() when project run from .jar file
    private String fullPath="./src/SkypeBot/";
    
    private QA_System qa;     
    private Thread t1;
    private DefaultListModel<String> contactListModel;
    private int updateControl;
    private String userID;
 
    
    /**
     * Creates new form QA_GUI
     * @throws com.skype.SkypeException
     */
    public QA_GUI()
    {
        initComponents();  
        stopButton.setEnabled(false);
        selectedUserStatusBar.setText("No user seleted");
        statusBar.setText("");
        
       
        // set main window dimensions.
        setMinimumSize(new Dimension(getScreenWidth()/2,getScreenHeight()/2));
        setResizable(false);
        
        // for conversation area auto scrolling down
        DefaultCaret caret = (DefaultCaret) chatTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        // variable for updating QA System (only use when QA_Data.txt data not fixed) 
        updateControl=0;
        
        setTitle("Java helping system");
        
        
        // create list model
        contactListModel=new DefaultListModel<>();
        // remove all elements of list model
        contactListModel.removeAllElements();
        
        // Create QA System
        try
        {
            qa = new QA_System(chatTextArea, contactListModel);
        }
        catch (FileNotFoundException | SkypeException ex)
        {
            
        }
        
        
        // set list model to contactList(JList)
        contactList.setModel(qa.getListModel());
        
        // use for checking friends status and update QA System after some time 
        TimerTask statusUpdateTask = new TimerTask() 
        {

            @Override
            public void run() 
            {
                // check and update friends status 
                qa.updateStatus();
                
                  //(only use when QA_Data.txt data not fixed) 
//                updateControl++;
//                // update QA System when updateControl becomes 5 
//                if (updateControl == 5)
//                {
//                    updateControl=0;
//                    try
//                    {
//                        qa = new QA_System(conversationTextArea, contactListModel);
//                    }
//                    catch (FileNotFoundException | SkypeException ex)
//                    {
//                    }
//                }
            }
        };
        //create a new Timer
        Timer statusUpdateTimer = new Timer("StatusTimer");
        //this line starts the timer at the same time its executed
        
        statusUpdateTimer.schedule(statusUpdateTask, 30, 5000);     //scheduleAtFixedRate(statusUpdateTask, 30, 5000); 
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        ChatScrollPane = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        ContactsScrollPane = new javax.swing.JScrollPane();
        contactList = new javax.swing.JList<>();
        HistoryPlane = new javax.swing.JPanel();
        viewHistoryButton = new javax.swing.JButton();
        clearHistoryButton = new javax.swing.JButton();
        selectedUserStatusBar = new javax.swing.JLabel();
        BottonLayeredPane = new javax.swing.JLayeredPane();
        statusBar = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLayeredPane4 = new javax.swing.JLayeredPane();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ChatScrollPane.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ChatScrollPane.setMinimumSize(new java.awt.Dimension(11, 11));

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setRows(5);
        ChatScrollPane.setViewportView(chatTextArea);

        contactList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        contactList.setMaximumSize(new java.awt.Dimension(25, 85));
        contactList.setMinimumSize(new java.awt.Dimension(25, 85));
        contactList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                contactListValueChanged(evt);
            }
        });
        ContactsScrollPane.setViewportView(contactList);

        HistoryPlane.setLayout(new java.awt.GridLayout(1, 2, 3, 0));

        viewHistoryButton.setText("View History");
        viewHistoryButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                viewHistoryButtonMouseClicked(evt);
            }
        });
        HistoryPlane.add(viewHistoryButton);

        clearHistoryButton.setText("Delete History");
        clearHistoryButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                clearHistoryButtonMouseClicked(evt);
            }
        });
        HistoryPlane.add(clearHistoryButton);

        selectedUserStatusBar.setText("jLabel1");

        jLayeredPane1.setLayer(ChatScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(ContactsScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(HistoryPlane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(selectedUserStatusBar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChatScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ContactsScrollPane)
                    .addComponent(HistoryPlane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectedUserStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ChatScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(ContactsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedUserStatusBar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HistoryPlane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jLayeredPane1, java.awt.BorderLayout.CENTER);

        BottonLayeredPane.setLayout(new java.awt.BorderLayout());

        statusBar.setText("jLabel1");
        BottonLayeredPane.add(statusBar, java.awt.BorderLayout.LINE_START);
        BottonLayeredPane.add(filler1, java.awt.BorderLayout.PAGE_START);

        jLayeredPane4.setLayout(new java.awt.FlowLayout());

        startButton.setText("Start");
        startButton.setActionCommand("StartButton");
        startButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                startButtonMouseClicked(evt);
            }
        });
        jLayeredPane4.add(startButton);

        stopButton.setText("Stop");
        stopButton.setActionCommand("StopButton");
        stopButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                stopButtonMouseClicked(evt);
            }
        });
        jLayeredPane4.add(stopButton);

        exitButton.setText("Exit");
        exitButton.setActionCommand("ExitButton");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                exitButtonMouseClicked(evt);
            }
        });
        jLayeredPane4.add(exitButton);

        BottonLayeredPane.add(jLayeredPane4, java.awt.BorderLayout.LINE_END);
        BottonLayeredPane.add(filler2, java.awt.BorderLayout.CENTER);

        getContentPane().add(BottonLayeredPane, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // close application
    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_exitButtonMouseClicked
    {//GEN-HEADEREND:event_exitButtonMouseClicked
        // ----------------------------- save recent chat for next time use in save savechat.log file before clossing application -----------------------------  
        File lastLogFile;
        FileWriter lastLogFileWrite = null;
        
        lastLogFile = new File(fullPath+"lastChat.log"); // fullPath provide full path of file when run using .jar

        if (!lastLogFile.exists())
        {
            try
            {
                lastLogFile.createNewFile();
            }
            catch (IOException ex)
            {

            }
        }

        try
        {
            // simple write don't append data
            lastLogFileWrite = new FileWriter(lastLogFile);
            lastLogFileWrite.write(String.format("%s\n", chatTextArea.getText()));
            lastLogFileWrite.close();
        }
        catch (IOException ex)
        {

        }
        // ---------------------------------------------------------- 
        
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseClicked

    // stop application
    private void stopButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_stopButtonMouseClicked
    {//GEN-HEADEREND:event_stopButtonMouseClicked
        qa.stopSystem();
        try
        {
            TimeUnit.MILLISECONDS.sleep(200);
        }
        catch (InterruptedException ex)
        {
        }
        
        // update friend status
        qa.updateStatus();
        
        stopButton.setEnabled(false);
        startButton.setEnabled(true);
        
        statusBar.setForeground(Color.RED);
        statusBar.setText("<html><font color='red'><b>QA System OFF</b></font></html>");
    }//GEN-LAST:event_stopButtonMouseClicked

    // start application
    private void startButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_startButtonMouseClicked
    {//GEN-HEADEREND:event_startButtonMouseClicked
            t1=new Thread(qa);
            qa.startSystem();
            t1.start();
            
            
            stopButton.setEnabled(true);
            startButton.setEnabled(false);
            
            statusBar.setForeground(Color.GREEN);
            statusBar.setText("<html><font color='green'><b>QA System ON</b></font></html>");
    }//GEN-LAST:event_startButtonMouseClicked

    // view the record of selected user
    private void viewHistoryButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_viewHistoryButtonMouseClicked
    {//GEN-HEADEREND:event_viewHistoryButtonMouseClicked
        // ----------------------------- any user selected from contact list and show chat history ----------------------------- 
        // read last time chat from lastChat.log
        File inFile;
        Scanner fileReader;
        if(userID!=null)
        {
            
            inFile=new File(fullPath+userID+".log"); // fullPath provide full path of file when run using .jar
            
            StringBuilder sb=new StringBuilder();
            
            if (inFile.exists())
            {
                try
                {
                    fileReader = new Scanner(inFile);
                    while (fileReader.hasNext())
                    {
                        sb.append(fileReader.nextLine());
                        sb.append("\n");
                    }
                    
                    historyFrame history=new historyFrame(sb.toString(), userID);
                }
                catch (FileNotFoundException ex)
                {
                    
                }

            }
            else
            {
                JOptionPane.showMessageDialog(null, userID+" have no history", "User History", JOptionPane.INFORMATION_MESSAGE,null);
            }
            
        }
        else
        {
            selectedUserStatusBar.setText("Select user first");
        }
    }//GEN-LAST:event_viewHistoryButtonMouseClicked

    // delete the record of selected user
    private void clearHistoryButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_clearHistoryButtonMouseClicked
    {//GEN-HEADEREND:event_clearHistoryButtonMouseClicked
        // ----------------------------- any user selected from contact list and clear chat history ----------------------------- 
        if(userID!=null)
        {
            File file=new File(fullPath+userID+".log");  // fullPath provide full path of file when run using .jar
            // delete file
            if(file.delete())
            {
                JOptionPane.showMessageDialog(null, userID+" history cleared", "Clear History", JOptionPane.INFORMATION_MESSAGE,null);
            }
            else
            {
                JOptionPane.showMessageDialog(null, userID+" history already cleared", "Clear History", JOptionPane.INFORMATION_MESSAGE,null);
            }
        }
        else
        {
            selectedUserStatusBar.setText("Select user first");
        }
    }//GEN-LAST:event_clearHistoryButtonMouseClicked

    private void contactListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_contactListValueChanged
    {//GEN-HEADEREND:event_contactListValueChanged
        userID=contactList.getSelectedValue();
        
        // ----------------------------- remove [ OFFLINE ] and [ ONLINE ] part from ID ----------------------------- 
        if(userID!=null)
        {
            if(userID.contains("[ OFFLINE ] "))
            {
                userID=userID.replace("[ OFFLINE ] ", "");
            }
            else if(userID.contains("[ ONLINE ] "))
            {
                userID=userID.replace("[ ONLINE ] ", "");
            }
            selectedUserStatusBar.setText(userID+": is selected");
        }
    }//GEN-LAST:event_contactListValueChanged

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try {
        UIManager.setLookAndFeel(
            UIManager.getCrossPlatformLookAndFeelClassName());
    } catch (Exception e) 
    { 
        
    }

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new QA_GUI().setVisible(true);
            }
        });
        
    }

    // get screen height
    public int getScreenHeight()
    {
        return (int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().getSize().getHeight();
    }

    // get screen width
    public int getScreenWidth()
    {
        return (int) java.awt.Toolkit.getDefaultToolkit().getScreenSize().getSize().getWidth();
    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane BottonLayeredPane;
    private javax.swing.JScrollPane ChatScrollPane;
    private javax.swing.JScrollPane ContactsScrollPane;
    private javax.swing.JPanel HistoryPlane;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JButton clearHistoryButton;
    private javax.swing.JList<String> contactList;
    private javax.swing.JButton exitButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLabel selectedUserStatusBar;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusBar;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton viewHistoryButton;
    // End of variables declaration//GEN-END:variables
}

